from telethon import TelegramClient, events, Button
import json
import os
import asyncio
from config import api_id, api_hash, bot_token

client = TelegramClient('task_bot', api_id, api_hash).start(bot_token=bot_token)

tasks = {}
awaiting_task = {}
awaiting_reminder_confirmation = {}
awaiting_reminder_time = {}
awaiting_deletion = {}
awaiting_completion = {}

def save_tasks():
    with open('tasks.json', 'w') as file:
        json.dump(tasks, file)

def load_tasks():
    global tasks
    if os.path.exists('tasks.json'):
        with open('tasks.json', 'r') as file:
            tasks = json.load(file)
    else:
        tasks = {}

load_tasks()

async def send_reminder(user_id, task):
    await client.send_message(user_id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task}')

async def schedule_reminder(user_id, task, minutes):
    await asyncio.sleep(minutes * 60)
    await send_reminder(user_id, task)

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    buttons = [
        [Button.text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', resize=True), Button.text('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', resize=True)],
        [Button.text('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', resize=True), Button.text('‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', resize=True)]
    ]
    await event.respond("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=buttons)

@client.on(events.NewMessage(pattern='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'))
async def prompt_new_task(event):
    awaiting_task[event.sender_id] = True
    await event.respond('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É.')

@client.on(events.NewMessage)
async def handle_message(event):
    user_id = event.sender_id
    if event.out:
        return
    if user_id in awaiting_task and not event.message.text.startswith('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'):
        task = event.message.text
        if task:
            if str(user_id) not in tasks:
                tasks[str(user_id)] = []
            tasks[str(user_id)].append({'task': task, 'completed': False})
            save_tasks()
            del awaiting_task[user_id]
            awaiting_reminder_confirmation[user_id] = task
            await event.respond('–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù—É–∂–Ω–æ –ª–∏ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏? (–î–∞/–ù–µ—Ç)')
    elif user_id in awaiting_reminder_confirmation:
        answer = event.message.text.lower()
        if answer == '–¥–∞':
            awaiting_reminder_time[user_id] = awaiting_reminder_confirmation[user_id]
            del awaiting_reminder_confirmation[user_id]
            await event.respond('–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å?')
        elif answer == '–Ω–µ—Ç':
            del awaiting_reminder_confirmation[user_id]
            await event.respond('–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.')
        else:
            await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".')
    elif user_id in awaiting_reminder_time:
        try:
            minutes = int(event.message.text)
            task = awaiting_reminder_time[user_id]
            del awaiting_reminder_time[user_id]
            await event.respond(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.')
            await schedule_reminder(user_id, task, minutes)
        except ValueError:
            await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö —á–∏—Å–ª–æ–º.')
    elif user_id in awaiting_deletion:
        if event.message.text.lower() == '–≤—Å–µ':
            if str(user_id) in tasks:
                tasks[str(user_id)] = []
                save_tasks()
                del awaiting_deletion[user_id]
                await event.respond('–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.')
            else:
                await event.respond('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        else:
            try:
                task_number = int(event.message.text) - 1
                if str(user_id) in tasks and 0 <= task_number < len(tasks[str(user_id)]):
                    deleted_task = tasks[str(user_id)].pop(task_number)
                    save_tasks()
                    del awaiting_deletion[user_id]
                    await event.respond(f'–ó–∞–¥–∞—á–∞ "{deleted_task["task"]}" —É–¥–∞–ª–µ–Ω–∞.')
                else:
                    await event.respond('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            except ValueError:
                await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —á–∏—Å–ª–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–≤—Å–µ" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á.')
    elif user_id in awaiting_completion:
        try:
            task_number = int(event.message.text) - 1
            if str(user_id) in tasks and 0 <= task_number < len(tasks[str(user_id)]):
                tasks[str(user_id)][task_number]['completed'] = True
                save_tasks()
                del awaiting_completion[user_id]
                await event.respond(f'–ó–∞–¥–∞—á–∞ "{tasks[str(user_id)][task_number]["task"]}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
            else:
                await event.respond('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        except ValueError:
            await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —á–∏—Å–ª–æ–º.')

@client.on(events.NewMessage(pattern='üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'))
async def list_tasks(event):
    user_id = str(event.sender_id)
    if user_id in tasks and tasks[user_id]):
        message = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        for idx, task in enumerate(tasks[user_id], start=1):
            status = "‚úîÔ∏è" if task['completed'] else "‚ùå"
            message += f"{idx}. {task['task']} {status}\n"
        await event.respond(message)
    else:
        await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")

@client.on(events.NewMessage(pattern='‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'))
async def prompt_delete_task(event):
    awaiting_deletion[event.sender_id] = True
    await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–≤—Å–µ" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á.')

@client.on(events.NewMessage(pattern='‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'))
async def prompt_complete_task(event):
    awaiting_completion[event.sender_id] = True
    await event.respond('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å.')

client.start()
client.run_until_disconnected()
